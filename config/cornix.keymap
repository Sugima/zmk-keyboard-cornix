/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 200
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150
#define BASE 0
#define WIN 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4
#define NAVI   5
#define NUM    6
#define DEBUG  7

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    // Activate ADJUST layer by pressing raise and lower

    behaviors {
        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "tap-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-on-release;
        };

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "hold-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp TAB           &kp Q                     &kp W  &kp E         &kp R               &kp T                                                      &kp Y      &kp U        &kp I          &kp O      &kp P      &kp BACKSPACE
&kp LEFT_CONTROL  &kp A                     &kp S  &kp D         &kp F               &kp G                                                      &kp H      &kp J        &kp K          &kp L      &kp MINUS  &kp ENTER
&kp LEFT_SHIFT    &kp Z                     &kp X  &kp C         &kp V               &kp B                 &kp LS(LA(LC(LG(DOWN))))  &kp LG(W)  &kp N      &kp M        &kp COMMA      &kp DOT    &kp FSLH   &kp RIGHT_SHIFT
&kp LEFT_ALT      &kp LS(LA(LC(LEFT_GUI)))  &mo 5  &kp LEFT_GUI  &mt LEFT_GUI LANG2  &mt LEFT_SHIFT SPACE                                       &kp ENTER  &lt 2 LANG1  &kp RIGHT_GUI  &kp LC(Z)  &lt 4 ESC  &kp RIGHT_ALT
            >;

            sensor-bindings =
                <&inc_dec_kp LS(LC(RIGHT)) LS(LC(LEFT))>,
                <&inc_dec_kp LS(LG(RIGHT_BRACKET)) LS(LG(LEFT_BRACKET))>;
        };

        num_layer {
            display-name = "Num";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&trans  &none   &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                  &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp PLUS   &trans
&trans  &none   &kp DOLLAR       &kp PERCENT   &kp CARET             &none                                  &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &trans
&trans  &none   &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &none                  &trans  &trans  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &trans
&trans  &trans  &trans           &trans        &trans                &trans                                 &trans        &trans        &trans        &trans        &trans     &trans
            >;
        };

        Navi_layer {
            display-name = "Navi";
            bindings = <
&trans  &none   &kp TILDE       &kp GRAVE        &kp DOUBLE_QUOTES  &kp SQT                            &none          &kp HOME  &kp UP_ARROW  &kp END    &none    &trans
&trans  &none   &kp PIPE        &kp BACKSLASH    &kp COLON          &kp SEMI                           &kp BACKSPACE  &kp LEFT  &kp DOWN      &kp RIGHT  &kp DEL  &trans
&trans  &none   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &trans  &trans  &none          &none     &none         &none      &none    &trans
&trans  &trans  &trans          &trans           &trans             &trans                             &trans         &trans    &trans        &trans     &trans   &trans
            >;
        };

        function_layer {
            display-name = "Function";

            // TODO: Some binds are waiting for shifted keycode support.
            // -------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans  &none   &none   &none   &none   &none                   &kp F12  &kp F7  &kp F8  &kp F9  &none   &trans
&trans  &none   &none   &none   &none   &none                   &kp F11  &kp F4  &kp F5  &kp F6  &none   &trans
&trans  &none   &none   &none   &none   &none   &trans  &trans  &kp F10  &kp F1  &kp F2  &kp F3  &none   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans   &trans  &trans  &trans  &trans  &trans
            >;
        };

        misc_layer {
            bindings = <
&trans  &none   &none   &none       &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))                        &none   &none         &none         &none         &none                      &trans
&trans  &none   &none   &kp C_PREV  &kp C_NEXT            &kp C_PLAY_PAUSE                      &none   &bt BT_SEL 3  &bt BT_SEL 4  &none         &none                      &trans
&trans  &none   &none   &none       &none                 &none             &kp C_MUTE  &trans  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &kp LS(LA(LC(BACKSLASH)))  &trans
&trans  &trans  &trans  &trans      &trans                &trans                                &trans  &trans        &trans        &trans        &trans                     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "Misc";
        };
    };
};
